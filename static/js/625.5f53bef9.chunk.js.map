{"version":3,"file":"static/js/625.5f53bef9.chunk.js","mappings":"+OAIaA,EAAU,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACtBC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,iBAAKC,UAAU,UAAf,WACE,cAAGA,UAAU,OAAb,SAAqBH,KACrB,mBAAQI,KAAK,SAASD,UAAU,SAASE,QALxB,kBAAMJ,GAASK,EAAAA,EAAAA,IAAcP,GAA7B,EAKjB,sBAKL,EChBYQ,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAAnB,EAIrBC,EAAoB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,ECCzBC,EAAc,WACzB,IAAMJ,GAAWK,EAAAA,EAAAA,IAAYH,GAE7B,OACE,eAAIR,UAAU,OAAd,SACGM,EAASM,KAAI,gBAAGhB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACZ,yBACE,SAAC,EAAD,CAASD,GAAIA,EAAIC,KAAMA,KADhBD,EADG,KAOnB,E,mBCXYiB,EAAgB,WAC3B,IAAMP,GAAWK,EAAAA,EAAAA,IAAYH,GACvBV,GAAWC,EAAAA,EAAAA,MAiBjB,OACE,+BACE,kBAAMe,SAjBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACTC,EAAcF,EAAKG,SAASC,KAAKC,MACjCC,EAAgBN,EAAKG,SAASI,OAAOF,MACzBhB,EAASG,MAAMgB,MAC/B,qBAAGJ,KAAgBK,gBAAkBP,EAAYO,aAAjD,IAGAC,IAAAA,OAAAA,QAAwB,2BAExB7B,GAAS8B,EAAAA,EAAAA,IAAWT,EAAaI,IAEnCN,EAAKY,OACN,EAGiC7B,UAAU,OAAxC,WACE,mBAAOA,UAAU,QAAjB,UACG,IADH,QAGE,kBACE8B,aAAa,MACb9B,UAAU,QACVC,KAAK,OACLoB,KAAK,OACLU,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAOC,QAAQ,SAASlC,UAAU,QAAlC,UACG,IADH,UAGE,kBACE8B,aAAa,MACb9B,UAAU,QACVC,KAAK,MACLoB,KAAK,SACLU,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,oBAAQhC,KAAK,SAASD,UAAU,SAAhC,UACG,IADH,cAEc,WAKrB,ECrDc,SAASmC,IACtB,IAAMrC,GAAWC,EAAAA,EAAAA,MACXqC,GAAYzB,EAAAA,EAAAA,IAAYP,GAM9B,OAJAiC,EAAAA,EAAAA,YAAU,WACRvC,GAASwC,EAAAA,EAAAA,MACV,GAAE,CAACxC,KAGF,iCACE,SAACyC,EAAA,EAAD,WACE,gDAEF,SAAC1B,EAAD,KACA,yBAAMuB,GAAa,4BACnB,SAAC1B,EAAD,MAGL,C","sources":["components/contact/Contact.js","redux/contacts/selectors.js","components/contactList/ContactList.js","components/contactEditor/ContactEditor.js","pages/Contacts.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport './Contact.css';\n\nexport const Contact = ({ id, text }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <div className=\"wrapper\">\n      <p className=\"text\">{text}</p>\n      <button type=\"button\" className=\"button\" onClick={handleDelete}>\n        Delete\n      </button>\n    </div>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useSelector } from 'react-redux';\nimport { Contact } from '../contact/Contact';\nimport { selectAllContacts } from 'redux/contacts/selectors';\n//import css from './TaskList.module.css';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n\n  return (\n    <ul className=\"list\">\n      {contacts.map(({ id, text }) => (\n        <li key={id}>\n          <Contact id={id} text={text} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport Notiflix from 'notiflix';\n//import css from './TaskEditor.module.css';\n\nexport const ContactEditor = () => {\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const contactName = form.elements.name.value;\n    const contactNumber = form.elements.number.value;\n    const duplicate = contacts.items.find(\n      ({ name }) => name.toLowerCase() === contactName.toLowerCase()\n    );\n    if (duplicate) {\n      Notiflix.Notify.warning('Contact already exists!');\n    } else {\n      dispatch(addContact(contactName, contactNumber));\n    }\n    form.reset();\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <label className=\"label\">\n          {' '}\n          Name\n          <input\n            autoComplete=\"off\"\n            className=\"input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor=\"number\" className=\"label\">\n          {' '}\n          Number\n          <input\n            autoComplete=\"off\"\n            className=\"input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\" className=\"button\">\n          {' '}\n          Add contact{' '}\n        </button>\n      </form>\n    </>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/contactList/ContactList';\nimport { ContactEditor } from 'components/contactEditor/ContactEditor';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["Contact","id","text","dispatch","useDispatch","className","type","onClick","deleteContact","selectLoading","state","contacts","loading","selectAllContacts","items","ContactList","useSelector","map","ContactEditor","onSubmit","e","preventDefault","form","currentTarget","contactName","elements","name","value","contactNumber","number","find","toLowerCase","Notiflix","addContact","reset","autoComplete","pattern","title","required","htmlFor","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}